import cv2
import numpy as np
def ResizeWithAspectRatio(image, width=None, height=None, inter=cv2.INTER_AREA):
    dim = None
    (h, w) = image.shape[:2]

    if width is None and height is None:
        return image
    if width is None:
        r = height / float(h)
        dim = (int(w * r), height)
    else:
        r = width / float(w)
        dim = (width, int(h * r))

    return cv2.resize(image, dim, interpolation=inter)

all_x1=[1694.2486085343223, 1703.153988868274, 1773.283858998144, 1810.7892107892098, 525.4174397031538, 389.61038961038963, 428.1130634071809, 462.9488158899922, 475.7830404889227, 524.3697478991595, 538.120702826585, 484.95034377387304, 488.6172650878532, 526.5306122448978, 569.9443413729126, 587.7551020408162, 587.7551020408162, 577.7365491651204, 479.87012987012963, 457.79220779220753, 469.48051948051926, 487.6623376623374, 492.8571428571426, 476.6233766233764, 492.8571428571426, 483.1168831168829, 604.4526901669757, 613.3580705009274, 586.6419294990721, 595.547309833024, 583.3024118738402, 744.7124304267159, 808.1632653061222, 842.6716141001853, 908.3487940630795, 921.7068645640071, 935.0649350649347, 1030.7977736549162, 1037.47680890538, 1100.9276437847864, 1108.7198515769942, 1063.0797773654913, 1054.1743970315395, 1058.6270871985155, 1093.1354359925786, 1055.2875695732835, 1045.2690166975879, 1045.2690166975879, 1034.137291280148, 997.402597402597, 1029.6846011131722, 1010.7606679035247, 999.6289424860851, 1016.3265306122446, 1028.5714285714282, 1034.137291280148, 1030.7977736549162, 1044.1558441558439, 1047.4953617810756, 1099.8144712430424, 1086.4564007421147, 1096.4749536178103, 1089.7959183673465, 1024.1187384044524, 1000.742115027829, 946.1966604823745, 933.9517625231908, 929.4990723562149, 918.3673469387752, 889.424860853432, 848.2374768089051, 852.690166975881, 886.0853432282, 917.2541743970312, 887.198515769944, 867.1614100185526, 886.0853432282, 882.7458256029681, 898.3302411873838, 915.0278293135433, 913.9146567717993, 927.272727272727, 929.4990723562149, 949.5361781076064, 978.4786641929496, 994.1558441558436, 989.6103896103891, 992.9499072356213, 1008.5343228200368, 1007.4211502782928, 1017.4397031539885, 1029.6846011131722, 1045.2690166975879, 1041.9294990723558, 1048.6085343228197, 1054.1743970315395, 1065.3061224489793, 1069.758812615955, 1059.7402597402595, 1066.4192949907233, 1110.946196660482, 1080.890538033395, 1087.5695732838587, 1065.3061224489793, 1079.777365491651, 1078.664192949907, 1099.8144712430424, 1130.9833024118734, 1185.528756957328, 1224.489795918367, 1247.8664192949902, 1260.111317254174, 1242.3005565862704, 1236.7346938775506, 1210.0185528756954, 1252.3191094619663, 1266.790352504638, 1274.5825602968457, 1279.0352504638215, 1267.9035250463817, 1275.6957328385895, 1260.111317254174, 1274.5825602968457, 1290.1669758812611, 1303.5250463821887, 1300.185528756957, 1287.9406307977733, 1228.9424860853428, 1247.8664192949902, 1300.185528756957, 1331.354359925788, 1397.0315398886823, 1427.0871985157694, 1431.5398886827454, 1448.2374768089048, 1444.897959183673, 1422.6345083487936, 1460.4823747680887, 1463.8218923933205, 1499.4434137291275, 1492.7643784786637, 1442.671614100185, 1458.2560296846007, 1507.2356215213354, 1501.6697588126156, 1511.6883116883112, 1515.0278293135432, 1529.4990723562148, 1512.8014842300552, 1523.9332096474948, 1541.7439703153984, 1562.8942486085339, 1552.875695732838, 1551.762523191094, 1515.0278293135432, 1528.3858998144708, 1558.4415584415578, 1599.6289424860847, 1579.5918367346933, 1526.1595547309828, 1539.5176252319104, 1595.176252319109, 1611.8738404452686, 1640.8163265306116, 1635.2504638218918, 1647.4953617810756, 1653.0612244897954, 1674.211502782931, 1665.306122448979, 1680.8905380333947, 1688.6827458256025, 1693.1354359925783, 1679.7773654916507, 1694.2486085343223]
all_y1=[905.5658627087196, 825.4174397031537, 980.1484230055655, 1079.8201798201792, 1078.107606679035, 1076.1038961038962, 1011.6119174942702, 981.359816653934, 980.443086325439, 1073.0328495034373, 1062.032085561497, 972.1925133689837, 956.6080977845681, 934.5083487940627, 904.4526901669756, 903.3395176252316, 891.094619666048, 884.4155844155841, 943.1818181818177, 897.7272727272723, 878.2467532467527, 886.0389610389606, 878.2467532467527, 871.1038961038956, 863.3116883116878, 852.2727272727268, 637.2912801484229, 628.385899814471, 632.838589981447, 618.3673469387753, 568.2745825602966, 350.09276437847853, 353.43228200371044, 331.16883116883105, 323.3766233766233, 315.58441558441547, 282.1892393320964, 286.64192949907226, 274.3970315398886, 274.3970315398886, 299.9999999999999, 315.58441558441547, 337.84786641929486, 363.4508348794062, 371.243042671614, 381.2615955473097, 371.243042671614, 298.88682745825594, 287.7551020408162, 314.4712430426715, 409.09090909090895, 425.7884972170685, 510.3896103896102, 509.27643784786625, 425.7884972170685, 422.4489795918366, 466.9758812615954, 468.08905380333937, 419.10946196660467, 419.10946196660467, 436.9202226345082, 453.61781076066774, 504.8237476808904, 507.0500927643783, 521.5213358070499, 531.5398886827456, 532.6530612244896, 573.8404452690165, 512.6159554730982, 524.8608534322818, 589.424860853432, 619.4805194805193, 676.2523191094617, 717.4397031539886, 724.1187384044524, 855.4730983302409, 859.9257884972168, 851.0204081632651, 748.6085343228198, 729.6846011131723, 754.1743970315397, 756.4007421150276, 726.3450834879404, 740.8163265306121, 887.755102040816, 881.4935064935061, 865.9090909090904, 756.4007421150276, 760.8534322820035, 747.4953617810759, 744.155844155844, 761.9666048237474, 825.4174397031537, 863.2653061224487, 865.4916512059366, 865.4916512059366, 864.3784786641927, 854.359925788497, 829.8701298701296, 802.0408163265304, 825.4174397031537, 859.9257884972168, 864.3784786641927, 979.0352504638216, 981.2615955473095, 975.6957328385897, 864.3784786641927, 825.4174397031537, 817.6252319109459, 837.6623376623373, 952.3191094619663, 942.3005565862705, 836.5491651205934, 823.1910946196658, 809.8330241187382, 730.7977736549162, 715.2133580705007, 715.2133580705007, 766.4192949907233, 795.3617810760666, 825.4174397031537, 879.9628942486082, 887.755102040816, 838.7755102040813, 853.246753246753, 876.6233766233763, 889.9814471243039, 1013.5435992578847, 1014.6567717996286, 902.2263450834877, 874.3970315398884, 872.1706864564005, 901.1131725417437, 1020.2226345083485, 1017.9962894248605, 899.9999999999997, 867.7179962894246, 819.8515769944339, 808.7198515769942, 750.8348794063078, 731.9109461966602, 740.8163265306121, 690.7235621521334, 690.7235621521334, 754.1743970315397, 753.0612244897957, 691.8367346938774, 689.6103896103893, 758.6270871985155, 755.2875695732836, 691.8367346938774, 689.6103896103893, 705.194805194805, 725.2319109461964, 800.9276437847864, 809.8330241187382, 736.3636363636361, 774.2115027829311, 807.6066790352502, 912.2448979591834, 920.0371057513912, 809.8330241187382, 786.4564007421147, 779.7773654916509, 809.8330241187382, 808.7198515769942, 780.8905380333949, 779.7773654916509, 827.6437847866416, 828.7569573283856, 797.5881261595545, 820.9647495361778, 903.3395176252316, 905.5658627087196]
# all_x2 =[1304.6382189239328,1302.4118738404447,1261.2244897959179,1270.1298701298697,1304.6382189239328]
# all_y2 =[390.16697588126146,421.3358070500926,421.3358070500926,387.9406307977735,390.16697588126146]
# all_x3 =[1191.094619666048,1233.3951762523186,1231.1688311688308,1198.8868274582555,1202.2263450834876,1191.094619666048]
# all_y3 =[251.02040816326522,254.35992578849712,298.88682745825594,295.54730983302403,264.37847866419287,251.02040816326522]
# all_x4 =[1325.7884972170682,1345.8256029684596,1351.3914656771794,1322.4489795918364,1317.9962894248604,1325.7884972170682]
# all_y4 =[284.4155844155843,283.30241187384036,299.9999999999999,310.0185528756956,306.6790352504637,284.4155844155843]
# all_x5 =[1226.7161410018548,1243.4137291280144,1258.99814471243,1246.7532467532465,1252.3191094619663,1226.7161410018548]
# all_y5 =[381.2615955473097,420.2226345083487,389.0538033395175,384.6011131725416,376.80890538033384,381.2615955473097]
# all_x6 =[1217.8107606679032,1208.9053803339514,1217.8107606679032,1226.7161410018548,1217.8107606679032]
# all_y6 =[396.8460111317253,409.09090909090895,466.9758812615954,466.9758812615954,396.8460111317253]
# all_x7 =[1253.4322820037103,1228.9424860853428,1232.2820037105748,1253.4322820037103]
# all_y7 =[478.1076066790351,416.88311688311677,473.65491651205923,478.1076066790351]
# allxy =[[all_x1,all_y1],[all_x2,all_y2],[all_x3,all_y3],[all_x4,all_y4],[all_x5,all_y5],[all_x6,all_y6],[all_x7,all_y7]]
allxy =[[all_x1,all_y1]]  # add more if you have more tha 1 ROI coordinate

print(len(allxy))

coordinate = []
pts=[]
image = cv2.imread("./data/video/cafetefria_no_people.png")
# for i in range(0, len(all_x1)):
#     coordinate.append((round(all_x1[i]), round(all_y1[i])))
#     pts.append([round(all_x1[i]), round(all_y1[i])])
# print(coordinate)
# print(pts)
# with open('roi1.txt', 'w') as f:
#     f.write(str(coordinate))

for i in range(0, len(allxy)):
    for j in range(0,len(allxy[i][0])):
        # coordinate.append([round(allxy[i][0][j]), round(allxy[i][1][j])])
        coordinate.append((round(allxy[i][0][j]), round(allxy[i][1][j])))
        pts.append([round(allxy[i][0][j]), round(allxy[i][1][j])])

    #Convert dictionary values to int NumPy array (needed for cv2.polylines)
    pts = np.array(pts).astype(np.int32)      # <-- to int
    # Draw polygon lines
    image = cv2.polylines(image,
                          [pts],
                          isClosed=False,
                          color=(0, 255, 0),
                          thickness=3,
                          lineType=cv2.LINE_AA)

    cv2.fillPoly(image, pts=[pts], color=(0, 255, 0))
    # with open('roi'+ str(i+1) +'.txt', 'w') as f:
    #     f.write(str(coordinate))
    #     print(len(coordinate))



    print('point are '+ str(pts))
    print('coordinate : '+ str(coordinate))
    coordinate=[]
    pts =[]

# image = cv2.imread("cafetefria_no_people.png")


# #Convert dictionary values to int NumPy array (needed for cv2.polylines)
# pts = np.array(pts).astype(np.int32)      # <-- to int

# # Draw polygon lines
# image = cv2.polylines(image,
#                       [pts],
#                       isClosed=False,
#                       color=(0, 255, 0),
#                       thickness=3,
#                       lineType=cv2.LINE_AA)

# Show result
# cv2.imshow('image', image)
# cv2.waitKey(0)
resize = ResizeWithAspectRatio(image, width=1280) # Resize by width OR
# resize = ResizeWithAspectRatio(image, height=1280) # Resize by height
cv2.imshow('resize', resize)
cv2.imwrite('./data/video/cafetefria_ground.png',image)


cv2.waitKey()

cv2.destroyAllWindows()
